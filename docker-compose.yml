# docker-compose -f .\docker-compose.yml up -d
# seleniarm çalışmama sebebi aynı container'ı çalıştırıp durman olabilir, docker-compose down container'ları silmez.Elle silmen gerekebilir.
  #  docker ps -a --format "{{.ID}}\t{{.Names}}" --> isimleriyle container'ları gösterir.

version: "3.8"
services:

  ChromeService:
#    image: seleniarm/node-chromium:latest  for macosArm
    image: selenium/node-chrome:latest
    shm_size: 2gb
    depends_on:
      - HubService
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_INSTANCES=2
      - SE_NODE_MAX_SESSIONS=2
    #      - SE_NODE_SESSION_TIMEOUT=180
    networks:
      - my_network


  FirefoxService:
#      image: seleniarm/node-firefox:latest  for macosArm
      image: selenium/node-firefox:latest
      shm_size: 2gb
      depends_on:
        - HubService
      environment:
        - SE_EVENT_BUS_HOST=selenium-hub
        - SE_EVENT_BUS_PUBLISH_PORT=4442
        - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
        - SE_NODE_MAX_INSTANCES=1
        - SE_NODE_MAX_SESSIONS=1
    #      - SE_NODE_SESSION_TIMEOUT=180
      networks:
        - my_network


  HubService:
#      image: seleniarm/hub:latest for macosArm
      image: selenium/hub:latest
      container_name: selenium-hub
      ports:
        - "4442:4442"
        - "4443:4443"
        - "4444:4444"
      networks:
        - my_network


  chrome_video:
    image: selenium/video:ffmpeg-4.3.1-20230920
    volumes:
      - ./TestRecordings:/videos
    depends_on:
      - ChromeService
    environment:
      - DISPLAY_CONTAINER_NAME=ChromeService
      - FILE_NAME=chrome_video.mp4

##todo bunlarsız da direkt olarak video açılıyor. Bunları uçur
  firefox_video:
    image: selenium/video:ffmpeg-4.3.1-20230920
    volumes:
      - ./TestRecordings:/videos
    depends_on:
      - FirefoxService
    environment:
      - DISPLAY_CONTAINER_NAME=FirefoxService
      - FILE_NAME=firefox_video.mp4

  jenkins:
#    image: jenkins/jenkins:lts
    image: my-jenkins-image
    deploy:
      resources:
        limits:
          memory: 2G
    user: root
    container_name: jenkins
    privileged: true  # privileged özelliği, Docker ayrıcalıklarını etkinleştirir ve Jenkins ajanının Docker konteynerlerini oluşturmasına ve yönetmesine olanak tanır.
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock  # Docker socket'ı eklenmiştir.
    command: >
        bash -c "chmod 666 /var/run/docker.sock && cd /var/jenkins_home && git config --global --add safe.directory '*' && chown -R 1000:1000 /var/jenkins_home && /usr/local/bin/jenkins.sh"
    depends_on:
      - HubService
      - mysql
    environment:
      - JAVA_TOOL_OPTIONS=--add-opens=java.base/java.lang=ALL-UNNAMED
    networks:
      - my_network

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    volumes:
      - ./sonarqube/plugins:/opt/sonarqube/extensions/plugins
      - ./sonarqube/sonarqube_data:/opt/sonarqube/data
    depends_on:
      - jenkins
    networks:
      - my_network

  mysql:
   image: mysql:8.0
   container_name: mysql
   environment:
     MYSQL_ROOT_PASSWORD: root
     MYSQL_DATABASE: test_database
     MYSQL_USER: user
     MYSQL_PASSWORD: password
   volumes:
     - ./mysql_data:/var/lib/mysql
     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
   ports:
     - "3306:3306"
   restart: always
   networks:
     - my_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana_data:/var/lib/grafana
      - ./grafana/grafana_dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana_provisioning:/etc/grafana/provisioning
    networks:
      - my_network

volumes:
  jenkins_home:
  sonarqube:
  mysql_data:
  grafana:
  plugins:
    external: true

networks:
  my_network:
    driver: bridge


# Jenkins
      #    Jenkinsfile'ı repoya koymanıza rağmen tanımıyorsa[not a git repository] :
      #      cd /var/jenkins_home
      #      git config --global --add safe.directory '*'

# Selenium HUB - selenium video
      # https://www.youtube.com/watch?v=NjQ5zZM7fpI  -- //todo Scale 1+ chrome command + Vnc Viewer 
      # https://www.youtube.com/watch?v=r1gdJ-QICmY

      #secret is password for VNC video
      #Askıda kalan session'u öldürme

      # MacOS için docker compose up sırasında hatalar veriyordu linux için olmaz gibi warning'ler
        # gerçekten de chrome ayağa kaldırıp test koşamadı. Localden dene bunu, sonra jenkinsle.
        # çözüm için şurayı inceliyorum : https://hub.docker.com/u/seleniarm
        # Yukarıdaki seleniarm'lar ile çalıştı.

      # container ismini verip DNS çözümlemesi sağlayabilirsin. Sürekli değişir çünkü container ip'si
      #      WebDriver webDriver = new RemoteWebDriver(URI.create("http://selenium-hub:4444/wd/hub").toURL(), options);

      # Jenkins
      # Jenkins açıldıktan sonra Manage Jenkins --> Tools --> JDK | Git | Maven'a default isimler verip; automatically install yap
      # Sonarqube için SonarScanner plugin'i indirip Jenkins'e yükle

    # Bunun için tanıme command ekledik:
      #Jenkinsfile'ı repoya koymanıza rağmen tanımıyorsa[not a git repository] : 
      #  cd /var/jenkins_home
      #  git config --global --add safe.directory '*'

    # volumes tanımı olmazsa ya ./ lazımdır fakat yukarıda direkt jenkins_home:... verdik ve oldu.
      # ya da yezma yetkisiyle alakaldırı. Local terminalinde sudo chown -R 1000:1000 ./jenkins_home şeklinde yetki verdik.


# Jenkins - SeleniumHUB configurations
      # Docker üzerinden kaldırdığınız jenkins ip'sine göre hub vermek gerekiyor: 
      # docker container logs seleniumHub > sth.txt
      # sth.txt -- 04:04:42.159 INFO [Hub.execute] - Started Selenium Hub 4.12.1 (revision 8e34639b11): http://172.21.0.2:4444
      # Bu adresi testinizde vermelisiniz : WebDriver webDriver = new RemoteWebDriver(URI.create("http://172.21.0.2:4444/wd/hub").toURL(), options);            
      # Yukarıdaki açıklamalar yerine aşağıdaki "önemli, ip konusu. Jenkins-selenium hub | Jenkins-sonarqube" başlığına bakılabilir.

# Sonarqube
# https://funnelgarden.com/sonarqube-jenkins-docker/
# Buradaki gibi jenkins için bir webhook + Sonarqube'ta bir token oluşturuyoruz. Token'ı jenkins'te credentials üzerinden sonarqube server'a veriyoruz.
# Sonarqube server'a sonar'ın ip port'u ile adresini de evriyoruz: http://172.21.0.6:9000 şeklinde ve son olarak bu konfigürasyona bir "name" verip bu name'i
# Jenkinsfile'da withSonarqubeEnv() içine veriyoruz.

      # http://localhost:9000/ --> admin/admin ile ilk giriş yapılıp; şifre değiştirme ekranına gidilir.
      # http://localhost:9000/account/security/ --> Generate Tokens --> Token Name verilip Generate edilir.
      # Jenkins'e SonarScanner plugin kurulur : https://funnelgarden.com/sonarqube-jenkins-docker/
          # webhook tanımlıyoruz. BaseTest'te jenkins ip'sini vermiştik yine onunla wehbook tanımlıyacağız:
          # http://localhost:9000/admin/webhooks --> Name: Jenkins | URL: http://172.21.0.2:8080/sonarqube-webhook/ | Secret: Generate edilen token<squ_ae0d062b92d5874e86c569fe8cce58d8fba048ac>
      # Jenkins --> Manage Jenkins -->  System --> SonarQube servers --> Add SonarQube --> Name: SonarQube | Server URL: http://sonarqube:9000 | Server authentication token: Generate edilen token
      # Jenkins --> Manage Jenkins --> Global Tool Configuration --> SonarQube Scanner --> Name: SonarQubeScanner | Install automatically: işaretli | Install from Maven Central: işaretli
      # Jenkins --> Manage Jenkins --> Configure System --> SonarQube servers --> Add SonarQube --> Name: SonarQubeScanner | Server URL: http://sonarqube:9000 | Server authentication token: Generate edilen token
      

      # Plugin
          # Plugin yazmak için volume tanımında  - ./plugins:/opt/sonarqube/extensions/plugins yaptık ve otomatik olarak proje dizininde plugins geldi.


 # Önemli, ip konusu. Jenkins-selenium hub | Jenkins-sonarqube
      # şu komut ile container ip'lerine ulaşabilirsin.
          # docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <sonarqube_container_id>
          # docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' seleniumHub
      # PS C:\Users\Semih\Desktop\Discipline\Projects\DevOps\Shell> docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 1261
      # 172.21.0.3  --> jenkins
      # PS C:\Users\Semih\Desktop\Discipline\Projects\DevOps\Shell> docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 01ed
      # 172.21.0.2 --> selenium/hub
            # WebDriver webDriver = new RemoteWebDriver(URI.create("http://172.21.0.2:4444/wd/hub").toURL(), options);

      # PS C:\Users\Semih\Desktop\Discipline\Projects\DevOps\Shell> docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 017a
      # 172.21.0.6 --> sonarqube

# todo : DNS
      # ip'siz dns ile docker-compose.yml'de container_name vererek de ulaşılabilir.
      # soru: Docker-compose'da örneğin sonarqube'u ayağa kaldırırken ip'si değişiyor. Bunun değişmemesini nasıl sağlarım?
      # cevap: container_name vererek.
      # cevap: container_name verdiğimde ip'siz dns ile ulaşılabilir.
      # soru: peki dns ile sonarqube adresini jenkinse nasıl tanımlayacağım? DNS otomatik mi algılanacak?
      # cevap: evet otomatik algılanıyor.
      # soru: jenkins ayarlarında sonarqube server'a https://sonarqube:9000 şeklinde tanımladık. Bu nasıl çalışıyor?
        # cevap: dns ile çalışıyor. sonarqube container'ının ip'si değişse bile dns ile ulaşılabilir.


# todo : gherkin language ekleme
# todo : gherkin scanner jar'ı indir sonarqube'a ekle volume üzerinden.
# todo : plugin'i kendi cümleleriniz için nasıl değiştirebiliz, co-pilot ile ona çalış.

# copilot
# soru: [ERROR] Failed to execute goal org.sonarsource.scanner.maven:sonar-maven-plugin:3.10.0.2594:sonar (default-cli) on project Trendyol_SemihSaydam: Not authorized. Please check the user token in the property 'sonar.token' or the credentials in the properties 'sonar.login' and 'sonar.password'. -> [Help 1]


#todo netleş:
# sürekli compose down yapsan da bu silmiyor.
# WARN[0000] Found orphan containers ([seleniumappforjenkinssonar-chrome_video-1 seleniumappforjenkinssonar-edge_video-1 seleniumappforjenkinssonar-firefox_video-1 seleniumappforjenkinssonar-EdgeService-1 seleniumappforjenkinssonar-FirefoxService-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.
#Bunu yaptıktan sonra :
#  ✔ Container sseleniumappforjenkinssonar-FirefoxService-1  Removed           3.7s
#  ✔ Container seleniumappforjenkinssonar-edge_video-1      Removed           0.7s
#  ✔ Container seleniumappforjenkinssonar-chrome_video-1    Removed           0.7s
#  ✔ Container seleniumappforjenkinssonar-firefox_video-1   Removed           0.6s
#  ✔ Container seleniumappforjenkinssonar-EdgeService-1     Removed           3.9s
#  ✔ Container seleniumHub                                  Running           0.0s
#  ✔ Container jenkins                                      Running           0.0s
#  ✔ Container sonarqube                                    Running           0.0s
#  ✔ Container seleniumappforjenkinssonar-ChromeService-1   Running           0.0s


## ÖNEMLİ - Docker in docker  - müthiş - DOCKER SOCKET KONUSU. DOCKER ile docker cli'ı jenkins container'ına bağlama
#    - /var/run/docker.sock:/var/run/docker.sock  # Docker socket'ı eklenmiştir.
#    Bu docker socket ile docker cli'ı jenkins container'ınıza bağlayıp jenkins contaer'ında istediğini kurmanı sağlıyor. Müthişş
#
#  Sonra jenkinsfile'ında aşağıdakileri diyebiliyorsun.
#  sh """
#  docker run --network <network_name> --rm mysql:8.0 sh -c 'mysql -h mysql -u root -proot test_database -e \"
#    INSERT INTO test_results (passed, failed, duration)
#    VALUES (10, 2, 300);
#  \"'
#"""
## btw --rm mysql:8.0 sh bu container'ı işi bitince siler. Komutunu çalıştırır ve siler.
## Burada hata aldık çünkü jenkins image'ı içinde docker cli yok tabi. Bunu bir dockerfile'da ekleyip sonra
## docker build -t my-jenkins-image . komutu ile içinde jenkins:lts ve docker-cli olan yeni bir jenkins image'ı oluşturuyoruz.
## sonra bunu gidip docker-compose.yml'de jenkins image'ı yerine my-jenkins-image yazıyoruz. Ve çalıştırıyoruz.
## Artık jenkins'ten docker push atabilirsin. Yani Deployment yapabilirsin adım adım jenkinsfile'ında. docker socket'ine bağlısın
## Burada Dockerfile yerine direkt /var/.. volume eklemeyle oluyor jenkinse, onun peşine de düşebilirsin.


## ÖNEMLİ - NETWORK konusu
# Burada mysql ve jenkins'i aynı network'e bağlaman gerekiyor bu arada ağ haberleşmesini yapabilmeleri için bu da önemli.
# -->Grafana servisi, network-bridge adlı ağa bağlanır. Bu, Grafana'nın MySQL servisi ile aynı ağda olmasını ve MySQL servisi ile iletişim kurabilmesini sağlar
# EĞER SONARQUBE'U Bu network'e bağlamazsan ulaşamaz. Bir network oluşturuyorsan tüm servisleri aynı network'e bağlamalısın.
# depends_on ile çalışıyordu fakat artık network'e 2 şeyi bağlıyorsan birini bağlamıyorsan o ulşamamaya başlıyor. Çok öenmli bir konu.
# NETWORK'UN yanlış olduğu için 2 saat uğraştın :D Network komutlarında container'larının network'ün altında görünmesi gerekiyor:
## docker network ls
## docker network inspect network-bridge
## benim network ismin saçma oluştuğu için öyle olmuş --> network ls komutundan keşfettim --> my_network
#!!!! # BURADA OTOMATİK OLARAK NETWORK İSMİNE PROJE İSMİNİ DE EKLEMİŞ. FAKAT SEN MESELA NETWORK: my_network yaptıysan yukarıdaki servise'lere de
      # my_network yazmalısın. Yoksa aynı networkte olmazlar. Fakat Jenkinsfile'ında docker run --network seleniumappforjenkinssonar_my_network yazman gerekiyor!!!

## Grafana
# vet, Grafana'nın ayarlarını ve gösterge tablolarını otomatik olarak yüklemek için bir yapılandırma dosyası kullanabilirsiniz. Grafana, JSON formatında dışa aktarılan ve içe aktarılan gösterge tablolarını destekler. Bu, Grafana'nın her başlatıldığında aynı gösterge tablolarını ve ayarları yüklemesini sağlar.  Öncelikle, Grafana'da oluşturduğunuz gösterge tablolarını JSON formatında dışa aktarmanız gerekiyor. Bunu, Grafana kullanıcı arayüzünde gösterge tablosunu açıp "Share" seçeneğini seçerek ve ardından "Export" sekmesine tıklayarak yapabilirsiniz. Bu, gösterge tablosunu bir JSON dosyası olarak dışa aktarmanızı sağlar.  Daha sonra, bu JSON dosyalarını Docker Compose dosyasında belirttiğiniz bir volume'a yerleştirebilirsiniz. Bu volume, Grafana container'ının /var/lib/grafana/dashboards dizinine bağlanmalıdır. Bu, Grafana'nın başlatıldığında bu dizindeki tüm JSON dosyalarını otomatik olarak yüklemesini sağlar.  Ayrıca, Grafana'nın bu gösterge tablolarını otomatik olarak yüklemesi için bir yapılandırma dosyası oluşturmanız gerekiyor. Bu yapılandırma dosyası, Grafana'nın /etc/grafana/provisioning/dashboards dizinine yerleştirilmelidir. Bu yapılandırma dosyası, Grafana'nın hangi gösterge tablolarını yüklemesi gerektiğini belirtir.  Docker Compose dosyanızı aşağıdaki gibi güncelleyebilirsiniz
#   grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    volumes:
#      - ./grafana_data:/var/lib/grafana
#      - ./grafana_dashboards:/var/lib/grafana/dashboards
#      - ./grafana_provisioning:/etc/grafana/provisioning
#    networks:
#      - network-bridge
#
# Bu yapılandırma, ./grafana_dashboards dizinindeki tüm JSON dosyalarını Grafana container'ının /var/lib/grafana/dashboards dizinine ve ./grafana_provisioning dizinindeki tüm yapılandırma dosyalarını Grafana container'ının /etc/grafana/provisioning dizinine bağlar.
## GRAFANA OTOMATİK MYSQL BAĞLI GELMESİ
# grafana_provisioning/
        #└── datasources
        #    └── mysql.yaml
# şeklinde olmalı dosya dizini ve bunun yanında içeriği de şöyle bir şey olmalı :
#apiVersion: 1
#datasources:
#  - name: MySQL
#    type: mysql
#    access: proxy
#    url: mysql:3306
#    database: test_database
#    user: user
#    password: password
#    jsonData:
#      timeField: 'timestamp'
#    secureJsonFields:
#      password: true
#    isDefault: true
##
## GRAFANA OTOMATİK DASHBOARD OLUŞTURULU GELMESİ
##Grafana Dashboard Ayarları: Grafana'da kullanmak istediğiniz dashboard'ı önceden oluşturun ve yapılandırın. Daha sonra bu dashboard'ı JSON formatında dışa aktarın. Grafana arayüzünde, "Settings" bölümüne giderek "Export" sekmesini seçebilir ve dashboard'ınızı JSON olarak dışa aktarabilirsiniz.
#Dashboard JSON Dosyasını Proje Dizinine Ekleyin: Docker Compose proje dizininize, oluşturduğunuz dashboard JSON dosyasını ekleyin. Örneğin, proje dizininizde bir dashboard.json dosyası oluşturun.
# NOT: Tek bir servisi kapatıp açma
  # ekledikten sonra docker-compose stop grafana ve docker-compose up -d grafana yaparak güncellemeleri görebilirsin.