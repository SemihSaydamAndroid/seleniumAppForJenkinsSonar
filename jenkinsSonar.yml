# docker-compose -f .\jenkinsSonar.yml up -d
version: "3"
services:
  HubService:
    image: selenium/hub:latest
    container_name: seleniumHub
    ports:
      - "4445:4444" 
      - "4442:4442"
      - "4443:4443"

  ChromeService:
    image: selenium/node-chrome:latest
    shm_size: "2gb"
    ports:
      - "5900"  
      - "7900"
    environment:
      - SE_EVENT_BUS_HOST=seleniumHub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=4
    depends_on:
      - HubService   
      - jenkins

  FirefoxService:
    image: selenium/node-firefox:latest
    shm_size: "2gb"
    ports:
      - "5900"  
      - "7900"
    environment:
      - SE_EVENT_BUS_HOST=seleniumHub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=2
    depends_on:
      - HubService   
      - jenkins

  EdgeService:
    image: selenium/node-edge:latest
    shm_size: "2gb"
    ports:
      - "5900"  
      - "7900"
    environment:
      - SE_EVENT_BUS_HOST=seleniumHub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=2
    depends_on:
      - HubService   
      - jenkins

  chrome_video:
    image: selenium/video:ffmpeg-4.3.1-20230920
    volumes:
      - ./TestRecordings:/videos
    depends_on:
      - ChromeService
    environment:
      - DISPLAY_CONTAINER_NAME=ChromeService
      - FILE_NAME=chrome_video.mp4

  edge_video:
    image: selenium/video:ffmpeg-4.3.1-20230920
    volumes:
      - ./TestRecordings:/videos
    depends_on:
      - EdgeService
    environment:
      - DISPLAY_CONTAINER_NAME=EdgeService
      - FILE_NAME=edge_video.mp4

  firefox_video:
    image: selenium/video:ffmpeg-4.3.1-20230920
    volumes:
      - ./TestRecordings:/videos
    depends_on:
      - FirefoxService
    environment:
      - DISPLAY_CONTAINER_NAME=FirefoxService
      - FILE_NAME=firefox_video.mp4

  jenkins:
    image: jenkins/jenkins:lts
    user: root
    privileged: true  # privileged özelliği, Docker ayrıcalıklarını etkinleştirir ve Jenkins ajanının Docker konteynerlerini oluşturmasına ve yönetmesine olanak tanır.
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
    command: >
        bash -c "cd /var/jenkins_home && git config --global --add safe.directory '*' && chown -R 1000:1000 /var/jenkins_home && /usr/local/bin/jenkins.sh"
    depends_on:
      - HubService
    
  sonarqube:
    image: sonarqube:latest
    ports:
      - "9000:9000" 
    volumes:
      - ./plugins:/opt/sonarqube/extensions/plugins
    depends_on:
      - jenkins

volumes:
  jenkins_home:
  plugins:
    external: true

# Selenium HUB - selenium video
      # https://www.youtube.com/watch?v=NjQ5zZM7fpI  -- //todo Scale 1+ chrome command + Vnc Viewer 
      # https://www.youtube.com/watch?v=r1gdJ-QICmY

      #secret is password for VNC video

# Jenkins
      # Jenkins açıldıktan sonra Manage Jenkins --> Tools --> JDK | Git | Maven'a default isimler verip; automatically install yap
      # Sonarqube için SonarScanner plugin'i indirip Jenkins'e yükle

      #Jenkinsfile'ı repoya koymanıza rağmen tanımıyorsa[not a git repository] : 
      #  cd /var/jenkins_home
      #  git config --global --add safe.directory '*'

# Jenkins - SeleniumHUB configurations
      # Docker üzerinden kaldırdığınız jenkins ip'sine göre hub vermek gerekiyor: 
      # docker container logs seleniumHub > sth.txt
      # sth.txt -- 04:04:42.159 INFO [Hub.execute] - Started Selenium Hub 4.12.1 (revision 8e34639b11): http://172.21.0.2:4444
      # Bu adresi testinizde vermelisiniz : WebDriver webDriver = new RemoteWebDriver(URI.create("http://172.21.0.2:4444/wd/hub").toURL(), options);            

# Sonarqube
      # http://localhost:9000/ --> admin/admin ile ilk giriş yapılıp; şifre değiştirme ekranına gidilir.
      # http://localhost:9000/account/security/ --> Generate Tokens --> Token Name verilip Generate edilir.
      # Jenkins'e SonarScanner plugin kurulur : https://funnelgarden.com/sonarqube-jenkins-docker/
          # webhook tanımlıyoruz. BaseTest'te jenkins ip'sini vermiştik yine onunla webook tanımlıyacağız:
          # http://localhost:9000/admin/webhooks --> Name: Jenkins | URL: http://172.21.0.2:8080/sonarqube-webhook/ | Secret: Generate edilen token<squ_ae0d062b92d5874e86c569fe8cce58d8fba048ac>
      # Jenkins --> Manage Jenkins -->  System --> SonarQube servers --> Add SonarQube --> Name: SonarQube | Server URL: http://sonarqube:9000 | Server authentication token: Generate edilen token
      # Jenkins --> Manage Jenkins --> Global Tool Configuration --> SonarQube Scanner --> Name: SonarQubeScanner | Install automatically: işaretli | Install from Maven Central: işaretli
      # Jenkins --> Manage Jenkins --> Configure System --> SonarQube servers --> Add SonarQube --> Name: SonarQubeScanner | Server URL: http://sonarqube:9000 | Server authentication token: Generate edilen token
      


      # Plugin
          # Plugin yazmak için volume tanımında  - ./plugins:/opt/sonarqube/extensions/plugins yaptık ve otomatik olarak proje dizininde plugins geldi.